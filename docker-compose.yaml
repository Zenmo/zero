# This is for use during development.
# TODO: it would be more user-friendly and more prod-like if we put a Traefik proxy in the network.

services:
    migrate:
        image: redgate/flyway:10.17.0
        volumes:
            - ./migrations:/flyway/sql
        command: migrate
        env_file:
            -   ./docker/flyway.env
        environment:
            FLYWAY_URL: jdbc:postgresql://postgres:5432/postgres
            FLYWAY_USER: postgres
        depends_on:
            - postgres

    kleinverbruik:
        build:
            context: ./kleinverbruik
        ports:
            - 127.0.0.1:80:80

    gradle-base:
        image: gradle:8.10.0-jdk21
        working_dir: /home/gradle/zero
        user: gradle
        volumes:
            - .:/home/gradle/zero
            - gradle-base-cache:/home/gradle/.gradle
        entrypoint: gradle --project-cache-dir=/tmp/gradle

    gradle-base-17:
        extends:
            service: gradle-base
        image: gradle:8.10.0-jdk17

    zorm-test:
        extends:
            service: gradle-base
        depends_on:
            - postgres
        volumes:
            - gradle-zorm-test-home:/home/gradle/.gradle
        command: zorm:test --no-daemon
        env_file:
            - ./docker/ztor.env
        environment:
            POSTGRES_URL: jdbc:postgresql://postgres:5432/test
            POSTGRES_USER: postgres

    ## Production version
    ztor-production:
        build:
            context: .
        user: 1000:1000
        ports:
            - 127.0.0.1:8082:8082
        env_file:
            - ./docker/ztor.env
        environment:
            POSTGRES_URL: jdbc:postgresql://postgres:5432/postgres
            POSTGRES_USER: postgres
            BASE_URL: http://localhost:8082
            CORS_ALLOW_ORIGIN_PATTERN: 'http://localhost:1234'
            # Keycloak test realm JWK
            ACCESS_TOKEN_JWK: |
                {
                    "kid": "n-X5BeXFe6pIXhDBsDu2mQ2VYc23RSZCFRU5Y6IuzC8",
                    "kty": "OKP",
                    "alg": "EdDSA",
                    "use": "sig",
                    "crv": "Ed25519",
                    "x": "ILokSbk8EKH-Q1aWo_TguuDRccoSVfEbmGSbm5gcn5I"
                }

    # You can use this container to run one-off commands, for example:
    # docker compose run --rm ztor-gradle-with-db ztor:run --args=fudura-import-hessenpoort
    ztor-gradle-with-db:
        extends:
            service: gradle-base
        depends_on:
            - postgres
        env_file:
            - ./docker/ztor.env
        environment:
            POSTGRES_URL: jdbc:postgresql://postgres:5432/postgres
            POSTGRES_USER: postgres

    ztor-test:
        extends:
            service: ztor-gradle-with-db
        volumes:
            - gradle-test-cache:/home/gradle/.gradle
        command: ztor:test --no-daemon
        environment:
            POSTGRES_URL: jdbc:postgresql://postgres:5432/test

    ## Recompiles on source code changes.
    ## Do ensure that the two Gradle containers have independent Home directories and Project cache directories.
    ztor-build-once:
        extends:
            service: gradle-base
        volumes:
            - gradle-build-once-cache:/home/gradle/.gradle
        command: ztor:buildFatJar --no-daemon

    ## Recompiles on source code changes.
    ## Do ensure that the two Gradle containers have independent Home directories and Project cache directories.
    ztor-build:
        extends:
            service: gradle-base
        volumes:
            - gradle-build-cache:/home/gradle/.gradle
        command: ztor:classes

    ## Runs Ktor web server and reloads classes if the compiled .class file changes.
    ## Do ensure that the two Gradle containers have independent Home directories and Project cache directories.
    ztor-run:
        extends:
            service: ztor-gradle-with-db
        volumes:
            - gradle-run-cache:/home/gradle/.gradle
        command: ztor:run
        ports:
            - 127.0.0.1:8082:8082
        environment:
            BASE_URL: http://localhost:8082
            CORS_ALLOW_ORIGIN_PATTERN: 'http://localhost:1234'
            # Keycloak test realm JWK
            ACCESS_TOKEN_JWK: |
                {
                    "kid": "n-X5BeXFe6pIXhDBsDu2mQ2VYc23RSZCFRU5Y6IuzC8",
                    "kty": "OKP",
                    "alg": "EdDSA",
                    "use": "sig",
                    "crv": "Ed25519",
                    "x": "ILokSbk8EKH-Q1aWo_TguuDRccoSVfEbmGSbm5gcn5I"
                }

    ztor-echo-schema-sql:
        extends:
            service: ztor-gradle-with-db
        volumes:
            - gradle-cmd-cache:/home/gradle/.gradle
        command: ztor:run --args=echo-schema-sql
        environment:
            # other database
            POSTGRES_URL: jdbc:postgresql://postgres:5432/gen

    ztor-create-schema:
        extends:
            service: ztor-echo-schema-sql
        command: ztor:run --args=create-schema
        environment:
            # other database
            POSTGRES_URL: jdbc:postgresql://postgres:5432/gen

    vallum-test:
        extends:
            service: gradle-base
        command: vallum:test
        volumes:
            - gradle-vallum-test-cache:/home/gradle/.gradle
            - gradle-vallum-test-stuff:/home/gradle/zero/.gradle
        depends_on:
            - postgres
        env_file:
            - ./docker/ztor.env
        environment:
            POSTGRES_URL: jdbc:postgresql://postgres:5432/postgres
            POSTGRES_USER: postgres
            BASE_URL: http://localhost:8082
            CORS_ALLOW_ORIGIN_PATTERN: 'http://localhost:1234'
            # Keycloak test realm JWK
            ACCESS_TOKEN_JWK: |
                {
                    "kid": "n-X5BeXFe6pIXhDBsDu2mQ2VYc23RSZCFRU5Y6IuzC8",
                    "kty": "OKP",
                    "alg": "EdDSA",
                    "use": "sig",
                    "crv": "Ed25519",
                    "x": "ILokSbk8EKH-Q1aWo_TguuDRccoSVfEbmGSbm5gcn5I"
                }

    npm:
        image: node:22
        working_dir: /app/frontend
        volumes:
            - .:/app
        entrypoint: npm

    frontend:
        extends:
            service: npm
        command: run start
        environment:
            VITE_KLEINVERBRUIK_URL: http://127.0.0.1:80
            VITE_ZTOR_URL: http://localhost:8082
        ports:
            - 127.0.0.1:1234:3000

    postgres:
        image: postgres:13.9 # same as on Azure
        ports:
            - 127.0.0.1:5432:5432
        volumes:
            - postgres:/var/lib/postgresql/data
        command: "-c log_statement=all"
        env_file:
            - ./docker/postgres.env

volumes:
    gradle-vallum-test-cache:
    gradle-vallum-test-stuff:
    gradle-base-cache:
    gradle-build-cache:
    gradle-build-once-cache:
    gradle-zorm-test-home:
    gradle-test-cache:
    gradle-run-cache:
    gradle-cmd-cache:
    postgres:
